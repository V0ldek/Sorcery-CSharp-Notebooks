#!markdown

# 3.0. Indexers

<small>Copyright (c) Mateusz Gienieczko 2022</small>

## How to use this notebook

### Content

This notebook is a part of the C#.NET Course at https://gienieczko.com/teaching/csharp/3-generics-and-collections.

It covers topics for section [3.0. Indexers](https://gienieczko.com/teaching/csharp/3-generics-and-collections/0-indexers).

### Notebook flow

The content within a single subsection of this notebook is self-contained.
However, within a single subsection you need to execute snippets from top to bottom,
as the snippets below might use variables or types that are declared in the snippets above.

### Play around

You can edit the code parts freely and experiment with the language.
That's kind of the point of doing all this in notebooks.

#!markdown

## Defining an indexer

We've seen a few different uses of the `[]` indexer expression.
In single dimensional arrays we pass a single integer to index into a given place of an array.
We can also pass a `System.Index`, like `^1`, or slice it with `[a..b]`.

For multidimensional arrays we had to pass two arguments, separated with a comma.

In this module we'll also see dictionaries, which allow indexing by complex keys like strings.

Knowing a bit of C#, you should probably feel that it'd be extremely weird if we weren't allowed to
use this syntax with our custom types. An indexer is actually just a special pair of methods akin to a property,
but with parameters:

#!csharp

#nullable enable

struct Point
{
    public double X { get; init; }
    public double Y { get; init; }

    public override string ToString() => $"({X}, {Y})";
}

struct Path
{
    private readonly Point[]? _points;

    private Point[] Points => _points ?? Array.Empty<Point>();

    public Point this[int index]
    {
        get => Points[index];
    }

    public Path(Point[] points) => _points = points;
}

var path = new Path(new Point[]
{
    new(),
    new() { X = 1.5 },
    new() { X = 2.0, Y = 2.0 }
});

Console.WriteLine(path[1]);

#!markdown

It can also have a setter, and take any number of arguments. It can also be overloaded.

#!csharp

class C
{
    public string this[int a, string b] 
    {
        get => $"Get [{a}, {b}]";
        set => Console.WriteLine($"Set [{a}, {b}] to {value}");
    }

    public string this[int a, int b] 
    {
        get => $"Get [{a}, {b}]";
        set => Console.WriteLine($"Set [{a}, {b}] to {value}");
    }

    public string this[int a, int b, int c] 
    {
        get => $"Get [{a}, {b}, {c}]";
        set => Console.WriteLine($"Set [{a}, {b}, {c}] to {value}");
    }
}

var c = new C();

Console.WriteLine(c[1, 2]);
Console.WriteLine(c[1, 2, 3]);
Console.WriteLine(c[1, "A"]);

c[1, 2] = "val1";
c[1, 2, 3] = "val2";
c[1, "A"] = "val3";

#!markdown

## Supporting `Index` and `Range`

We can allow our type to interact with `Index` and `Range` directly by creating correct overloads
of the indexer.

#!csharp

#nullable enable

struct Point
{
    public double X { get; init; }
    public double Y { get; init; }

    public override string ToString() => $"({X}, {Y})";
}

struct Path
{
    private readonly Point[]? _points;

    private Point[] Points => _points ?? Array.Empty<Point>();

    public Point this[int index] => Points[index];

    public Point this[Index index] => Points[index];

    public Path this[Range range] => new(Points[range]);

    public Path(Point[] points) => _points = points;

    public override string ToString() => $"[ {string.Join(", ", Points)} ]";
}

var path = new Path(new Point[]
{
    new(),
    new() { X = 1.5 },
    new() { X = 2.0, Y = 2.0 },
    new() { X = 5.0, Y = 3.0 },
    new() { X = 6.9, Y = -1.0}
});

Console.WriteLine(path[^1]);
Console.WriteLine(path[1..3]);
Console.WriteLine(path[0..^1]);

#!markdown

However, the compiler has special rules that automatically add syntactic sugar to our types
to allow this.

1. If the type has an indexer that takes a single `int` index _and_ an `int Count` or `int Length` property,
then there's an obvious implementation for indexing where `[x]` is `[x]` and `[^x]` is `[Count - x]`/`[Length - x]`.

2. If the type defines a public `Slice(int, int)` _and_ at least one of the `int Count`, `int Length` properties,
then there's an implementation for slicing where `[a..b]` is `Slice(a, b - a)`, etc. for indices.

#!csharp

#nullable enable

struct Point
{
    public double X { get; init; }
    public double Y { get; init; }

    public override string ToString() => $"({X}, {Y})";
}

struct Path
{
    private readonly Point[]? _points;

    private Point[] Points => _points ?? Array.Empty<Point>();

    public int Length => Points.Length;

    public Point this[int index] => Points[index];

    public Path(Point[] points) => _points = points;

    public Path Slice(int start, int length) => new(Points[start..(start + length)]);

    public override string ToString() => $"[ {string.Join(", ", Points)} ]";
}

var path = new Path(new Point[]
{
    new(),
    new() { X = 1.5 },
    new() { X = 2.0, Y = 2.0 },
    new() { X = 5.0, Y = 3.0 },
    new() { X = 6.9, Y = -1.0}
});

Console.WriteLine(path[^1]);
Console.WriteLine(path[1..3]);
Console.WriteLine(path[0..^1]);

#!markdown

If you're creating a new type, it's best to overload the indexer specifically.
The rules are mainly so that types existing before `Index` and `Range` were introduced have support for the new syntax automatically.
However:

- If it makes sense on your type you should probably expose `Length` or `Count` anyway; in our `Path` example it definitely does.
- If your type has a natural slicing operation, creating a `Slice(int, int)` method is a good idea for interoperability.

#!markdown

## Summary

We've learnt how to declare an indexer and how to support indexing and slicing with `Index` and `Range`.

#!markdown

## Next up:

Continue with the next section, [3.1. Generics](https://gienieczko.com/teaching/csharp/3-generics/1-generics),
or straight to the next notebook, [`01-generics.dib`](/03-GenericsAndCollections/01-generics.dib).
