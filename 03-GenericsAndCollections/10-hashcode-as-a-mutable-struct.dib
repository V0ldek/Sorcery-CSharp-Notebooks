#!markdown

# 3.10. HashCode as a Mutable Struct

<small>Copyright (c) Mateusz Gienieczko 2022</small>

## How to use this notebook

### Content

This notebook is a part of the C#.NET Course at https://gienieczko.com/teaching/csharp/3-generics-and-collections.

It covers topics for section [3.10. HashCode as a Mutable Struct](https://gienieczko.com/teaching/csharp/3-generics-and-collections/10-hashcode-as-a-mutable-struct).

### Notebook flow

The content within a single subsection of this notebook is self-contained.
However, within a single subsection you need to execute snippets from top to bottom,
as the snippets below might use variables or types that are declared in the snippets above.

### Play around

You can edit the code parts freely and experiment with the language.
That's kind of the point of doing all this in notebooks.

#!markdown

### `HashCode` as a mutable struct

`HashCode` is undoubtedly useful, but it's also interesting because of the other API it provides.
`HashCode` is itself a value type that can be used to construct a `HashCode` from many values
using its `Add` method. For example, say we have a structure that models a directed path through a 2D space.
Two paths are equal iff they contain exactly the same points in the same order:

#!csharp

#nullable enable

struct Point
{
    public double X { get; init; }

    public double Y { get; init; }
}

struct Path
{
    public Point[]? Points { get; init; }

    public override bool Equals(object? other)
    {
        if (other is not Path path || Points?.Length != path.Points?.Length)
        {
            return false;
        }

        if (Points == null && path.Points == null)
        {
            return false;
        }

        for (var i = 0; i < Points!.Length; i += 1)
        {
            if (!Points[i].Equals(path.Points![i]))
            {
                return false;
            }
        }

        return true;
    }
}

#!markdown

Now to correctly implement `GetHashCode` we need to iterate over all points and gather them into a single `int`.
The `HashCode` structure does exactly that with its instance `void Add<T>(T value)` method.
Yes, `void`!

#!csharp

#nullable enable

struct Point
{
    public double X { get; init; }

    public double Y { get; init; }
}

struct Path
{
    private readonly Point[]? _points;

    public Point[] Points 
    { 
        get => _points ?? Array.Empty<Point>(); 
        init => _points = value;
    }

    public override bool Equals(object? other)
    {
        if (other is not Path path || Points.Length != path.Points.Length)
        {
            return false;
        }

        for (var i = 0; i < Points.Length; i += 1)
        {
            if (!Points[i].Equals(path.Points[i]))
            {
                return false;
            }
        }

        return true;
    }

    public override int GetHashCode()
    {
        var hashCode = new HashCode();

        foreach (var point in Points)
        {
            hashCode.Add(point);
        }

        return hashCode.ToHashCode();
    }
}

var emptyPath = new Path();
var otherEmptyPath = new Path { Points = new Point[] {} };
var path = new Path { Points = new Point[] 
{
    new() { X = 1, Y = 2 },
    new() { X = 4, Y = 2 },
    new() { X = 5, Y = 5 },
}};
var equalPath = new Path { Points = new Point[] 
{
    new() { X = 1, Y = 2 },
    new() { X = 4, Y = 2 },
    new() { X = 5, Y = 5 },
}};
var reversePath = new Path { Points = new Point[] 
{
    new() { X = 5, Y = 5 },
    new() { X = 4, Y = 2 },
    new() { X = 1, Y = 2 },
}};

Console.WriteLine($"emptyPath.Equals(otherEmptyPath): {emptyPath.Equals(otherEmptyPath)}");
Console.WriteLine($"path.Equals(equalPath): {path.Equals(equalPath)}");
Console.WriteLine($"path.Equals(reversePath): {path.Equals(reversePath)}");
Console.WriteLine($"emptyPath.GetHashCode(): {emptyPath.GetHashCode()}");
Console.WriteLine($"otherEmptyPath.GetHashCode(): {otherEmptyPath.GetHashCode()}");
Console.WriteLine($"path.GetHashCode(): {path.GetHashCode()}");
Console.WriteLine($"equalPath.GetHashCode(): {equalPath.GetHashCode()}");
Console.WriteLine($"reversePath.GetHashCode(): {reversePath.GetHashCode()}");

#!markdown

So `HashCode` is a mutable struct!
It _has_ to be a mutable struct, because otherwise every `Add` would incur a copy
of the entire structure, and it's quite large, totalling $32$ bytes.
Since the whole point of `GetHashCode` is to be used for performance, it'd be an unacceptable cost.

This is pretty much the only reasonable usage for mutable value types: bags of data that are used inline
in a very specific scope, so that all mutations actually occur on a local variable
or a field that is directly accessed.

Doing a copy automatically breaks our code:

#!csharp

#nullable enable

struct Point
{
    public double X { get; init; }

    public double Y { get; init; }
}

struct Path
{
    public Point[]? Points { get; init; }

    public override int GetHashCode()
    {
        var hashCode = new HashCode();

        if (Points != null)
        {
            AddAllPoints(hashCode);
        }

        return hashCode.ToHashCode();
    }

    private void AddAllPoints(HashCode hashCode)
    {
        foreach (var point in Points!)
        {
            hashCode.Add(point);
        }
    }
}

var emptyPath = new Path();
var otherEmptyPath = new Path { Points = new Point[] {} };
var path = new Path { Points = new Point[] 
{
    new() { X = 1, Y = 2 },
    new() { X = 4, Y = 2 },
    new() { X = 5, Y = 5 },
}};
var equalPath = new Path { Points = new Point[] 
{
    new() { X = 1, Y = 2 },
    new() { X = 4, Y = 2 },
    new() { X = 5, Y = 5 },
}};
var reversePath = new Path { Points = new Point[] 
{
    new() { X = 5, Y = 5 },
    new() { X = 4, Y = 2 },
    new() { X = 1, Y = 2 },
}};

Console.WriteLine($"emptyPath.GetHashCode(): {emptyPath.GetHashCode()}");
Console.WriteLine($"otherEmptyPath.GetHashCode(): {otherEmptyPath.GetHashCode()}");
Console.WriteLine($"path.GetHashCode(): {path.GetHashCode()}");
Console.WriteLine($"equalPath.GetHashCode(): {equalPath.GetHashCode()}");
Console.WriteLine($"reversePath.GetHashCode(): {reversePath.GetHashCode()}");

#!markdown

## Summary

We've learnt that `HashCode` is a mutable struct, giving us a second (behind tuples)
example of when that's actually useful. We also know how to compose more complex
hashes using it.

#!markdown

## Next up:

Continue with the next section, [3.11. Records](https://gienieczko.com/teaching/csharp/3-generics/11-records),
or straight to the next notebook, [`11-records.dib`](/03-GenericsAndCollections/11-records.dib).
