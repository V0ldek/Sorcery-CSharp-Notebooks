#!markdown

# 4.3. Anonymous Types

<small>Copyright (c) Mateusz Gienieczko 2022</small>

## How to use this notebook

### Content

This notebook is a part of the C#.NET Course at https://gienieczko.com/teaching/csharp/4-linq.

It covers topics for section [4.3. Anonymous Types](https://gienieczko.com/teaching/csharp/4-linq/3-anonymous-types).

### Notebook flow

The content within a single subsection of this notebook is self-contained.
However, within a single subsection you need to execute snippets from top to bottom,
as the snippets below might use variables or types that are declared in the snippets above.

### Play around

You can edit the code parts freely and experiment with the language.
That's kind of the point of doing all this in notebooks.

#!markdown

## Creating anonymous types

Sometimes we don't really care enough to create a type for some
transformation that we want to perform. Declaring all the properties,
constructors, coming up with names, that's exhausting.

Consider a method that takes in two sequences, one of names of products,
the other of prices. It's supposed to return the name of the cheapest product.
We can do it like this:

#!csharp

#nullable enable

string? FindLowestPriceProduct(IReadOnlyList<string> names, IReadOnlyList<decimal> prices)
{
    ArgumentNullException.ThrowIfNull(names);
    ArgumentNullException.ThrowIfNull(prives);

    if (names.Count != prices.Count)
    {
        throw new ArgumentException("'names' must have the same number of elements as 'prices'");
    }

    if (names.Count == 0)
    {
        return null;
    }

    var best = new { Price = prices[0], Name = names[0] };

    for (var i = 1; i < prices.Count; i += 1)
    {
        if (prices[i] < best.Price)
        {
            best = new { Price = prices[i], Name = names[i] };
        }
    }

    return best.Name;
}

var names = new string[] { "Rubber Duck", "Metal Duck", "Paper Duck" };
var prices = new decimal[] { 10.0M, 53.99M, 3.19M };
var result = FindLowestPriceProduct(names, prices);
Console.WriteLine(result);

#!markdown

The magical `{ Price, Name }` type is anonymous.
We cannot return it from a method and we can only assign it to a
type-inferred variable with `var`.

#!markdown

## Properties of anonymous types

As you might expect, the type is simply generated as a private nested class
of the type in which we use the anonymous type.

The types are **immutable**, they automatically override `Equals` (and `GetHashCode`)
to have value equality, and provide a sensible `ToString` representation.

#!csharp

var x = new { Name = "Rubber Duck", Price = 10.0M };
var y = new { Name = "Rubber Duck", Price = 10.0M };

Console.WriteLine($"x == y? {x == y}");
Console.WriteLine($"x.Equals(y)? {x.Equals(y)}");
Console.WriteLine($"x: {x}");

#!markdown

A nested type is created for each ordered set of properties given to an anonymous type.
A simpler characterization – anonymous objects with the same properties in the same order
within the same assembly have the same type.

This is natural – when we create many objects with the exact same shape we want
them to be equatable and compatible, for example to collect them all in a collection.

#!csharp

List<T> SingletonList<T>(T item) => new List<T> { item };

var list = SingletonList(new { X = 1, Y = 2 });
list.Add(new { X = 2, Y = 1 });

#!markdown

But that's it. All the other anonymous objects are of incompatible types.

#!csharp

// Intentionally does not compile.
list.Add(new { X = 2 });
list.Add(new { X = 2, Y = 1, Z = 3 });
list.Add(new { Y = 1, X = 2 });

#!markdown

## Under the hood

Anonymous types have a rather straightforward implementation:

#!csharp

var x = new { FirstName = "Alice", LastName = "Alisson" };

#!markdown

Gets synthesized into:

```csharp
new AnonymousType0<string, string>("Alice", "Alisson");

internal sealed class AnonymousType0<TFirstName, TLastName>
{
    private readonly TFirstName _firstName;

    private readonly TLastName _lastName;

    public TFirstName FirstName => _firstName;

    public TLastName LastName => _lastName;

    public AnonymousType0(TFirstName firstName, TLastName lastName) =>
        (_firstName, _lastName) = (firstName, lastName);
        
    public override bool Equals(object value)
    {
        AnonymousType0<TFirstName, TLastName> anon = value as AnonymousType0<TFirstName, TLastName>;
        if (this != anon)
        {
            if (anon != null && EqualityComparer<TFirstName>.Default.Equals(_firstName, anon._firstName))
            {
                return EqualityComparer<TLastName>.Default.Equals(_lastName, anon._lastName);
            }
            return false;
        }
        return true;
    }

    public override int GetHashCode()
    {
        return (-430384090 * -1521134295 + EqualityComparer<TFirstName>.Default.GetHashCode(_firstName)) * -1521134295 + EqualityComparer<TLastName>.Default.GetHashCode(_lastName);
    }

    public override string ToString()
    {
        object[] array = new object[2];
        TFirstName val = _firstName;
        array[0] = ((val != null) ? val.ToString() : null);
        TLastName val2 = _lastName;
        array[1] = ((val2 != null) ? val2.ToString() : null);
        return string.Format(null, "{{ FirstName = {0}, LastName = {1} }}", array);
    }
}
```

#!markdown

## Nondestructive mutation – `with` syntax

#!markdown

Anonymous types support functional programming style mutation,
meaning that they are immutable, but we can easily construct a slightly
modified copy based on the original value:

#!csharp

var person = new { FirstName = "Alice", LastName = "Alisson", Age = 23 };

var personNextYear = person with { Age = 24 };

Console.WriteLine(person);
Console.WriteLine(personNextYear);

#!markdown

The modified properties need an accessible `set` or `init` accessor.

**This also works with `struct` types!**

#!csharp

readonly struct Point
{
    public double X { get; init; }
    public double Y { get; init; }

    public override string ToString() => $"({X}, {Y})";
}

var unitX = new Point { X = 1.0 };
var unit = unitX with { Y = 1.0 };

Console.WriteLine(unitX);
Console.WriteLine(unit);

#!markdown

By extension, it also works for tuples:

#!csharp

var tup = (first: 1, second: 2);
var modified = tup with { first = 3 };

Console.WriteLine(tup);
Console.WriteLine(modified);

#!markdown

## Anonymous types or tuples?

The choice usually boils down to mutability: tuples are mutable,
anonymous types are immutable, _but_ they allow nondestructive mutation.

Anonymous types are a natural choice for LINQ queries, but apart from their
compatibility with expression trees there's no real selling points that I know of.

#!markdown

## Summary

We know how to create lightweight anonymous types on-the-fly, which will be very useful
for LINQ queries later.

#!markdown

## Next up:

Continue with the next section, [4.4. Delegates](https://gienieczko.com/teaching/csharp/4-linq/4-delegates),
or straight to the next notebook, [`04-delegates.dib`](/04-LINQ/04-delegates.dib).
