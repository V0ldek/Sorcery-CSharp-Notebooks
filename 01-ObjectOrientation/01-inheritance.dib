#!markdown

# 0.7. Inheritance

<small>Copyright (c) Mateusz Gienieczko 2022</small>

## How to use this notebook

### Content

This notebook is a part of the C#.NET Course at https://gienieczko.com/teaching/csharp/1-object-orientation.

It covers topics for section [1.1. Inheritance](https://gienieczko.com/teaching/csharp/1-object-orientation/1-inheritance).

### Notebook flow

The content within a single subsection of this notebook is self-contained.
However, within a single subsection you need to execute snippets from top to bottom,
as the snippets below might use variables or types that are declared in the snippets above.

### Play around

You can edit the code parts freely and experiment with the language.
That's kind of the point of doing all this in notebooks.

#!markdown

## Class inheritance

Every class in C# inherits directly from exactly one other class.
By default, this is `object`, a.k.a. `System.Object`.
Because of this, the inheritance hierarchy in .NET forms a tree rooted in `System.Object`.

We cannot derive from more than one class due to the diamond problem.

Inheriting from a class causes the deriving class to get all of the base class'
members. That's it. That's the entire _mechanism_ of inheritance.

#!csharp

public class Duck
{
    public void Quack() => Console.WriteLine("Quack!");
}

public class NamedDuck : Duck
{
    public string Name { get; }

    public NamedDuck(string name) => Name = name;
}

var duck = new NamedDuck("Peter");
Console.WriteLine(duck.Name);
duck.Quack();

#!markdown

An instance of a derived type is always implicitly convertible to its base type.
Such a conversion is also called an **identity conversion**, as it doesn't actually do anything
– it's a no-op at runtime. 

The ability fact that an instance that has type `T` at compile time can, at runtime, be of type `T`
_but also_ of some type `U` where `U : T` is one of the aspects of **polymorphism**.

While the _mechanism_ is just "copying" members to the derived type,
the _semantics_ of inheritance is that it models an **is-a** relationship.
It's up to you when designing a class to make sure converting from derived to base
always makes logical sense in your hierarchy.

Most pitfalls with OOP start with using inheritance wrong, so we'll be putting a lot of emphasis on this.

#!csharp

void QuackTogether(Duck duck1, Duck duck2)
{
    duck1.Quack();
    duck2.Quack();
}

var duck = new Duck();
var derivedDuck = new NamedDuck("Peter");

QuackTogether(duck, derivedDuck);

#!markdown

## `base` constructor

When an instance of the derived class is constructed
it's important to initialise everything pertaining to the base class first.
This is done by invoking base's constructor. Implicitly, it's the parameterless constructor –
the code we wrote before was equivalent to:

#!csharp

public class NamedDuck : Duck
{
    public string Name { get; }

    public NamedDuck(string name) => Name = name;

    public NamedDuck() : base()
    {
    }
}

#!markdown

If the construction logic is more involved, exactly one base constructor has to be called
at the end of a constructor chain. For example:

#!csharp

public class NamedObject
{
    public string Name { get; }

    public NamedObject(string name) => Name = name;
}

public class Duck : NamedObject
{
    public int PossibleNumberOfQuacks { get; private set; }

    // OK: we call `Duck(string, int)`, which in turn calls `NamedObject(string)`.
    public Duck(string name) : this(name, 10)
    {
    }

    // OK: we call `NamedObject(string)` directly.
    public Duck(string name, int possibleNumberOfQuacks) : base(name)
    {
        PossibleNumberOfQuacks = possibleNumberOfQuacks;
    }
}

#!markdown

In this case when calling `Duck(string)` the order of initialisation is:
- `NamedObject(string)` runs,
- then `Duck(string, int)` runs,
- finally `Duck(string)` runs (but it's empty, so it instantly returns)

#!markdown

## Virtual methods and polymorphism

Okay, let's actually do something useful with those classes.

Inheritance is a way of achieving polymorphism, i.e. functions that operate
on groups of objects in a uniform way, but which might still differ in implementation.
We do that by overriding methods from ancestors in our derived class.

By default a method is not overridable. To enable overriding we need to explicitly declare a method as `virtual`.
Then we can override that method in a derived class with the `override` keyword.

#!csharp

public class Duck
{
    public virtual void Quack() => Console.WriteLine("Quack!");
}

public class LoudDuck : Duck
{
    public override void Quack() => Console.WriteLine("QUACK!!!");
}

void QuackTogether(Duck duck1, Duck duck2)
{
    duck1.Quack();
    duck2.Quack();
}

var duck = new Duck();
var loudDuck = new LoudDuck();

QuackTogether(duck, loudDuck);

#!markdown

We can do quite a bit with this power.

For example, circling back to the model from the previous section,
let's say that we have ducks that can get tired of quacking, but how the tiredness
is calculated differs between types of ducks. We create a base `Duck` class
that knows how to quack and performs the tiredness check before it does,
but the check itself can be overridden for different functionality.

#!csharp

public class Duck
{
    public string Name { get; }

    public int TimesQuacked { get; private set; }

    public Duck(string name) => Name = name;

    public void Quack()
    {
        if (!PrepareQuack())
        {
            Console.WriteLine($"{Name} cannot quack anymore...");
            return;
        }

        TimesQuacked += 1;
        Console.WriteLine("Quack!");
    }

    protected virtual bool PrepareQuack() => true;
}

var peter = new Duck("Peter");
peter.Quack();
Console.WriteLine(peter.TimesQuacked);

#!markdown

Now the ducks that have a set number of quacks can be modelled easily as follows:

#!csharp

public class LimitedEnergyDuck : Duck
{
    public int QuacksRemaining { get; private set; } = 10;

    public LimitedEnergyDuck(string name) : base(name)
    {
    }

    public LimitedEnergyDuck(string name, int possibleNumberOfQuacks) : this(name) =>
        QuacksRemaining = possibleNumberOfQuacks;

    protected override bool PrepareQuack()
    {
        if (QuacksRemaining == 0)
        {
            return false;
        }

        QuacksRemaining -= 1;
        return true;
    }
}

var peter = new LimitedEnergyDuck("Peter", 2);
peter.Quack();
peter.Quack();
peter.Quack();
Console.WriteLine(peter.TimesQuacked);

#!markdown

There's an issue with that code. Say that we have a very weird rule in which
we disallow the ducks with the name "Mat" from ever speaking, as a preventative measure.
We'd probably put that logic in the base `Duck` class:

#!csharp

public class Duck
{
    public string Name { get; }

    public int TimesQuacked { get; private set; }

    public Duck(string name) => Name = name;

    public void Quack()
    {
        if (!PrepareQuack())
        {
            Console.WriteLine($"{Name} cannot quack anymore...");
            return;
        }

        TimesQuacked += 1;
        Console.WriteLine("Quack!");
    }

    protected virtual bool PrepareQuack() => Name != "Mat";
}

var peter = new Duck("Peter");
peter.Quack();
Console.WriteLine(peter.TimesQuacked);

var mat = new Duck("Mat");
mat.Quack();
Console.WriteLine(mat.TimesQuacked);

#!markdown

However, as it stands, Mats that are also `LimitedEnergyDuck`s bypass this restriction:

#!csharp

public class LimitedEnergyDuck : Duck
{
    public int QuacksRemaining { get; private set; } = 10;

    public LimitedEnergyDuck(string name) : base(name)
    {
    }

    public LimitedEnergyDuck(string name, int possibleNumberOfQuacks) : this(name) =>
        QuacksRemaining = possibleNumberOfQuacks;

    protected override bool PrepareQuack()
    {
        if (QuacksRemaining == 0)
        {
            return false;
        }

        QuacksRemaining -= 1;
        return true;
    }
}

var mat = new LimitedEnergyDuck("Mat", 2);
mat.Quack();
mat.Quack();
mat.Quack();
Console.WriteLine(mat.TimesQuacked);

#!markdown

We would like the rules from the base class to also apply to the derived classes.
To that end, we have access to a special `base` identifier,
which is the exact same reference as `this`, but its static type is
set to the immediate parent class. With it, we can call the original implementation of a method
from its overridden variant.

#!csharp

public class LimitedEnergyDuck : Duck
{
    public int QuacksRemaining { get; private set; } = 10;

    public LimitedEnergyDuck(string name) : base(name)
    {
    }

    public LimitedEnergyDuck(string name, int possibleNumberOfQuacks) : this(name) =>
        QuacksRemaining = possibleNumberOfQuacks;

    protected override bool PrepareQuack()
    {
        if (!base.PrepareQuack() || QuacksRemaining == 0)
        {
            return false;
        }

        QuacksRemaining -= 1;
        return true;
    }
}

var mat = new LimitedEnergyDuck("Mat", 2);
mat.Quack();
Console.WriteLine(mat.TimesQuacked);

#!markdown

## Overriding vs overloading

Compare overriding with overloading: method overloads are chosen based on the compile-time type of a parameter being passed to a method;
virtual method dispatch happens at runtime depending on the actual type of the instance on which the method is called.

#!csharp

public class Duck
{
    public virtual void Quack() => Console.WriteLine("Quack!");
}

public class LoudDuck : Duck
{
    public override void Quack() => Console.WriteLine("QUACK!!!");
}

void QuackDuck(Duck duck)
{
    Console.WriteLine("A duck quacks like:");
    duck.Quack();
}

void QuackDuck(LoudDuck loudDuck)
{
    Console.WriteLine("A loud duck quacks like:");
    loudDuck.Quack();
}

Duck duck = new Duck();
LoudDuck loudDuck = new LoudDuck();
Duck disguisedDuck = new LoudDuck();

QuackDuck(duck);
QuackDuck(loudDuck);
QuackDuck(disguisedDuck);

#!markdown

Of course, this works only one way – a `LoudDuck` _is a_ `Duck`, but a `Duck` is not necessarily a `LoudDuck`.

#!csharp

// Intentionally does not compile.
LoudDuck loudDuck = new Duck();

#!markdown

## Casting

In the above snippet the compiler tells us that an explicit conversion exists here. That's true, if `U : T`, then there's
an explicit cast from `T` to `U`. That's a dangerous tool though, because it can _fail at runtime_.
Let's say we have a method like this:

#!csharp

public class Duck {}

public class LoudDuck : Duck
{
    public int LoudnessInDecibels { get; init; }
}

public void PrintLoudness(Duck duck)
{
    LoudDuck converted = (LoudDuck) duck;
    Console.WriteLine(converted.LoudnessInDecibels);
}

#!markdown

There are two scenarios here:
- caller passes a `LoudDuck` as an argument, the cast succeeds, we print the value of the property;
- caller passes just a `Duck` as an argument, the cast fails and throws an exception.

#!csharp

PrintLoudness(new LoudDuck { LoudnessInDecibels = 42 });

#!csharp

PrintLoudness(new Duck());

#!markdown

Actually, I kind of lied – there are arbitrarily many cases, because the caller can pass not only "just a `Duck`",
but also anything else that happens to inherit from `Duck`.

#!csharp

public class SomeOtherDuck : Duck
{
}

PrintLoudness(new SomeOtherDuck());

#!markdown

All of the typing here is based only on the inheritance hierarchy that we created.
C# is not dynamically typed, or duck-typed (hah) (at least in this case, as we'll see it is sometimes),
so we cannot pass something that imitates a `LoudDuck` even if it tries really hard.

#!csharp

public class Duck {}

public class LoudDuck : Duck
{
    public int LoudnessInDecibels { get; init; }
}

public class WannabeLoudDuck : Duck
{
    public int LoudnessInDecibels { get; init; }
}

public void PrintLoudness(Duck duck)
{
    LoudDuck converted = (LoudDuck) duck;
    Console.WriteLine(converted.LoudnessInDecibels);
}

PrintLoudness(new WannabeLoudDuck { LoudnessInDecibels = 42 });

#!markdown

## Hiding

A deriving class can define a member with the same signature as in a base _without_ overriding it.
In that case the method in the derived type hides the base's member.
This is usually by mistake and therefore causes a warning:

#!csharp

public class Duck
{
    public void Quack() => Console.WriteLine("Quack!");
}

public class LoudDuck : Duck
{
    public void Quack() => Console.WriteLine("QUACK!!!");
}

#!markdown

This is because we're basically back to static overloading in this case.
There are two methods with the same name, but the first one operates on a `Duck` instance
and the other on `LoudDuck`, and the choice of which to call is resolved statically:

#!csharp

Duck duck = new Duck();
LoudDuck loudDuck = new LoudDuck();
Duck disguisedDuck = new LoudDuck();

duck.Quack();
loudDuck.Quack();
disguisedDuck.Quack();

#!markdown

Sometimes you might actually want to do that.
The use cases are limited and usually have to do with patching up an old API.
In those cases, the `new` keyword silences the warning by explicitly opting-in to the
rather confusing, non-polymorphic semantics.

#!csharp

public class Duck
{
    public void Quack() => Console.WriteLine("Quack!");
}

public class LoudDuck : Duck
{
    public new void Quack() => Console.WriteLine("QUACK!!!");
}

Duck duck = new Duck();
LoudDuck loudDuck = new LoudDuck();
Duck disguisedDuck = new LoudDuck();

duck.Quack();
loudDuck.Quack();
disguisedDuck.Quack();

#!markdown

## Seal your types

We end on a very important life lesson: usually, the best kind of inheritance is no inheritance.
That's right. The easiest way to paint yourself into a terrible situation in OOP is by using inheritance,
and a lot of the time there are much better alternatives to it. Other languages live without it. 
We don't really know how yet, because generics are a topic of the next module, but making your code generic doesn't require subtyping.


For example, in Rust you have to consciously opt in to dynamic dispatching of method implementations
using their `dyn` traits.

C# made the frankly unfortunate decision of making types derivable by default, even though they did the
right thing with methods and made them non-virtual by default. There is a keyword that allows us to
block inheritance, and it's `sealed`:

#!csharp

// Intentionally does not compile.
public class Duck
{
}

public sealed class SealedDuck : Duck
{
}

public class InvalidDuck : SealedDuck
{
}

#!markdown

Here's a wisdom:

> The easiest way to deal with inheritance problems is to not have children.

**Use `sealed` as the default**. You need to consciously make effort to make your class effectively derivable,
so if you don't want it, don't allow it.

Oh, you can also use `sealed` to block further overrides of a virtual method:

#!csharp

// Intentionally does not compile.
public class Duck
{
    public virtual void Quack() => Console.WriteLine("Quack!");
}

public class LoudDuck : Duck
{
    public sealed override void Quack() => Console.WriteLine("QUACK!!!");
}

public class InvalidDuck : LoudDuck
{
    public override void Quack() => Console.WriteLine("Quack!");
}

#!markdown

## The `object` type

The root of the entire inheritance hierarchy is `object`. Every non-interface type inherits from `object`.
Every type is implicitly convertible to `object`.

The `Object` class defines a number of methods that are inherited, and therefore available on every object in .NET.

- `public virtual string ToString()` – we know this one, returns a string representation of the instance;
- `public virtual bool Equals(object)` – compare the instance with another one; we will discuss this one more closely later;
- `public virtual int GetHashCode()` – returns a hash of the object; again, let's leave this for later;
- `protected object MemberwiseClone()` – returns a shallow copy of the current object by naively copying all of its fields;
- `public Type GetType()` – returns the runtime type of the object; we'll talk about it near the end when we cover reflection;
  
Technically there's also the `Finalize()` method, but we need many more preliminaries before we're able to understand what
high level magic that is.

#!markdown

## Summary

We now know how to use inheritance in C#. We've used `protected` in practice, learnt how to override methods and how to seal our types.
We also know how implicit an explicit casts for related types work.

#!markdown

## Next up:

Continue with the next section, [1.2. Abstract Types](https://gienieczko.com/teaching/csharp/1-object-orientation/2-abstract-types),
or straight to the next notebook, `02-abstract-types.dib`.
