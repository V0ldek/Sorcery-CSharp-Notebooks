#!markdown

# 10.3. Channels

<small>Copyright (c) Mateusz Gienieczko 2022</small>

## How to use this notebook

### Content

This notebook is a part of the C#.NET Course at https://gienieczko.com/teaching/csharp/10-concurrency.

It covers topics for section [10.3. Channels](https://gienieczko.com/teaching/csharp/10-concurrency/3-channels).

### Notebook flow

The content within a single subsection of this notebook is self-contained.
However, within a single subsection you need to execute snippets from top to bottom,
as the snippets below might use variables or types that are declared in the snippets above.

### Play around

You can edit the code parts freely and experiment with the language.
That's kind of the point of doing all this in notebooks.

#!markdown

## Asynchronous communication

`BlockingCollection<T>` is good for blocking producer-consumer queues, but sometimes
asynchronous waiting is what we want. That's not supported in `BlockingCollection<T>`.

Channels are synchronised pipes between threads that have a number of input ends
-- writers -- and a number of output ends -- readers. A channel can be bounded,
in which case writes over the maximum capacity won't succeed.

All relevant types are exposed in `System.Threading.Channels`.

#!csharp

using System.Threading.Channels;

var channel = Channel.CreateBounded<int>(new BoundedChannelOptions(3)
{
    SingleReader = true,
    SingleWriter = true
});

async Task RunProducer(ChannelWriter<int> writer)
{
    for (var i = 0; i < 10; i += 1)
    {
        await Task.Delay(250);
        Console.WriteLine($"Producing {i}");
        await writer.WriteAsync(i);
    }

    writer.Complete();
}

async Task RunConsumer(ChannelReader<int> reader)
{
    var sum = 0;
    while (!reader.Completion.IsCompleted)
    {
        await Task.Delay(500);
        sum += await reader.ReadAsync();
        Console.WriteLine($"Sum: {sum}");
    }
}

var producerTask = RunProducer(channel.Writer);
var consumerTask = RunConsumer(channel.Reader);

await Task.WhenAll(producerTask, consumerTask);

#!markdown

If there is a single reader and writer then passing the optional flags
is beneficiary -- the factory method creates a specialised implementation
for the parameters.

Here's an example of many-producers many-consumers.

#!csharp

using System.Threading;
using System.Threading.Channels;

const int Producers = 100;
const int Consumers = 10;
var channel = Channel.CreateBounded<int>(new BoundedChannelOptions(3));
var barrier = new Barrier(Producers);

async Task RunProducer(ChannelWriter<int> writer)
{
    for (var i = 0; i < 10; i += 1)
    {
        await writer.WriteAsync(i);
    }

    barrier.SignalAndWait();
    writer.TryComplete();
}

async Task RunConsumer(ChannelReader<int> reader)
{
    var sum = 0;
    while (!reader.Completion.IsCompleted)
    {
        sum += await reader.ReadAsync();
    }
    Console.WriteLine($"Sum: {sum}");
}  

var producerTasks = Enumerable.Range(0, Producers).Select(_ => RunProducer(channel.Writer)).ToArray();
var consumerTasks = Enumerable.Range(0, Consumers).Select(_ => RunConsumer(channel.Reader)).ToArray();

await Task.WhenAll(Task.WhenAll(producerTasks), Task.WhenAll(consumerTasks));

#!markdown

## Next up:

Continue with the next section, [10.3. Channels](https://gienieczko.com/teaching/csharp/10-concurrency/3-channels),
or straight to the next notebook, [`03-channels.dib`](03-channels.dib).
