#!markdown

# 6.5. Transactions

<small>Copyright (c) Mateusz Gienieczko 2022</small>

## How to use this notebook

### Content

This notebook is a part of the C#.NET Course at https://gienieczko.com/teaching/csharp/6-entity-framework/5-transactions.

It covers topics for section [6.5. Transactions](https://gienieczko.com/teaching/csharp/6-entity-framework/5-transactions).

### Notebook flow

The content within a single subsection of this notebook is self-contained.
However, within a single subsection you need to execute snippets from top to bottom,
as the snippets below might use variables or types that are declared in the snippets above.

### Play around

You can edit the code parts freely and experiment with the language.
That's kind of the point of doing all this in notebooks.

#!markdown

## Single `SaveChangesAsync`

Implicitly, all operations on the `DbContext` happen in a transaction. Every `SaveChangesAsync` performs all the operations from the previous `SaveChangesAsync` (or the instantiation of the `DbContext`) inside a transaction. However, queries are not transactional.

#!markdown

## Complex transactions

We can start a transaction by calling `dbContext.Database.BeginTransaction()`, with an optional argument specifying the isolation level. The resulting disposable object is used to control the scope of the transaction. We can call `.Commit()` and `.Rollback()` on the transaction object.

#!markdown

## Summary

We've learnt how EF handles the object-relational mapping with tracking entities.

#!markdown

## Next up:

This is the end of the module, next up is the Assignment!
Click here to go there: [Assignment 6. - TODO](https://gienieczko.com/teaching/csharp/6-entity-framework/assignment/6-TODO).
