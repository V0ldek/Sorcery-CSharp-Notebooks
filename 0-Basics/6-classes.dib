#!markdown

# 0.6. Classes

<small>Copyright (c) Mateusz Gienieczko 2022</small>

## How to use this notebook

### Content

This notebook is a part of the C#.NET Course at https://gienieczko.com/teaching/csharp/0-basics.

It covers topics for section [0.6. Classes](https://gienieczko.com/teaching/csharp/0-basics/6-classes).

### Notebook flow

The content within a single subsection of this notebook is self-contained.
However, within a single subsection you need to execute snippets from top to bottom,
as the snippets below might use variables or types that are declared in the snippets above.

### Play around

You can edit the code parts freely and experiment with the language.
That's kind of the point of doing all this in notebooks.

#!markdown

## Accessibility modifiers

Before we declare any classes and their members, we need to cover accessibility.
Accessibility defines what other code can access the given symbol.
Every part of a type has some accessibility defined, including the type itself.

There are four core accessibility modifiers, and two special ones:

- `public` – accessible from everywhere;
- `protected` – only accessible from within this type and all the types derived from it (we'll talk about inheritance in the next section);
- `internal` – only accessible from within this assembly;
- `private` – only accessible from within this type.

The special accessibilities are a combo of `protected` and something else:

- `private protected` – `protected` AND `internal`; accessible only from this type and all derived types within this assembly;
- `protected internal` – `protected` OR `internal`; accessible from within this assembly, and from derived types in a different assembly;

These are much less common. The `private protected` is very useful for avoiding class brittleness,
and one could argue you should use it more often that `protected` itself, though.

#!markdown

Here's a handy table to summarise that:

| **Caller's location**                | `public` | `protected internal` | `protected` | `internal` | `private protected` | `private` |
|--------------------------------------|----------|----------------------|-------------|------------|---------------------|-----------|
| Within the type                      | ✔️️        | ✔️️                    | ✔️️           | ✔️️          | ✔️️                   | ✔️️         |
| Derived type, same assembly          | ✔️️        | ✔️️                    | ✔️️           | ✔️️          | ✔️️                   | ❌         |
| Non-derived type, same assembly      | ✔️️        | ✔️️                    | ❌           | ✔️️          | ❌                   | ❌         |
| Derived type, different assembly     | ✔️️        | ✔️️                    | ✔️️           | ❌          | ❌                   | ❌         |
| Non-derived type, different assembly | ✔️️        | ❌                    | ❌           | ❌          | ❌                   | ❌         |

#!markdown

## Classes

Okay, time to actually get to some C#. Up until now we couldn't have too much fun,
as C# is object-oriented at its core. Well, here come classes.

A **class** is a template from which objects are created with the use of **constructors**.
Such an object is called an **instance** of the class, and object creation is called **instantiation**.
They define **fields** that hold data internal to the object, as well as **methods**
that allow the outside world to interact with the object. Data points that we want to be
visible from the outside are exposed via special methods called **properties**.

#!markdown

A class has an accessibility modifier. The default, if you don't specify any yourself, is `internal`.

#!csharp

class InternalDuck
{
}

public class PublicDuck
{
}

#!markdown

## Fields

The core idea of object-orientation is encapsulating data with behaviour in an object.
To that end, we can define fields within a class. Every instance of the class
will have a value associated to each of its field. 

Each field has an accessibility modifier
and _it should never be anything else than `private` or `internal`_. Publicly visible fields
are awful and break encapsulation in the nastiest of ways.

#!csharp

public class Duck
{
    private string _name;
    private int _remainingQuacks;
    private int _timesQuacked;
}

#!markdown

The naming convention for `private` and `internal` fields is camelCase starting with an underscore.
Some people also omit the underscore, but then prefix every usage of a field with `this.` to distinguish it.

There is no naming convention for `public` or `protected` fields, because you should never use them.

#!markdown

## Constructors

To create an object we need a constructor. If we don't specify any, C# synthesises one for us – it's called the **default constructor**.

#!csharp

public class Duck
{
    private string _name;
    private int _remainingQuacks;
    private int _timesQuacked;

    // This declaration can be omitted, as it is the default.
    public Duck()
    {
    }
}

#!markdown

A constructor is a special method that gets invoked once when we create an object.
It's responsible for initialising the instance 
It can have any number of parameters.

A constructor has access to the special identifier `this`, just like instance method that we'll see in a moment.
It points to the instance which was just created. We can refer to fields as `this._field`, but most of the time
we can omit the `this`.

#!csharp

public class Duck
{
    private string _name;
    private int _remainingQuacks;
    private int _timesQuacked;

    public Duck(string name)
    {
        _name = name;
        _timesQuacked = 0;
        _remainingQuacks = 10;
    }
}

#!markdown

If the initialisation of a field is independent of a constructor, we can initialise them inline:

#!csharp

public class Duck
{
    private string _name;
    private int _remainingQuacks = 10;
    private int _timesQuacked = 0;

    public Duck(string name)
    {
        _name = name;
    }
}

#!markdown

Also, by default the fields are initialised to their default value.

#!csharp

public class Duck
{
    private string _name;
    private int _remainingQuacks = 10;
    private int _timesQuacked;  // Implicitly initialised to 0.

    public Duck(string name)
    {
        _name = name;
    }
}

#!markdown

We can define more than one constructor, with different parameters.

To actually instantiate an object we use `new T(args)` syntax.
It calls the appropriate constructor and returns the newly created instance.

#!csharp

public class Duck
{
    private string _name;
    private int _remainingQuacks = 10;
    private int _timesQuacked;

    public Duck(string name)
    {
        _name = name;
        
        Console.WriteLine($"_name = {_name}");
        Console.WriteLine($"_remainingQuacks = {_remainingQuacks}");
        Console.WriteLine($"_timesQuacked = {_timesQuacked}");
    }

    public Duck(string name, int possibleNumberOfQuacks)
    {
        _name = name;
        _remainingQuacks = possibleNumberOfQuacks;

        Console.WriteLine($"_name = {_name}");
        Console.WriteLine($"_remainingQuacks = {_remainingQuacks}");
        Console.WriteLine($"_timesQuacked = {_timesQuacked}");
    }
}

Duck peter = new Duck("Peter");
Duck johny = new Duck("Johny", 42);

#!markdown

By the way, we can see that the default constructor is synthesised only if we don't declare any custom constructors:

#!csharp

// Intentionally does not compile.
public class Duck
{
    private string _name;
    private int _remainingQuacks = 10;
    private int _timesQuacked;

    public Duck(string name)
    {
        _name = name;
    }

    public Duck(string name, int possibleNumberOfQuacks)
    {
        _name = name;
        _remainingQuacks = possibleNumberOfQuacks;
    }
}

var duck = new Duck();

#!markdown

It is possible to delegate work to a different constructor.
The pattern we used above with two constructors, `Duck(string)` and `Duck(string, int)` is actually quite common.
We allow the user to create an instance providing only a name, which will set the number of quacks to a default,
or to provide both. You can delegate to a different constructor using the `this` constructor initialiser.

#!csharp

public class Duck
{
    private string _name;
    private int _remainingQuacks;
    private int _timesQuacked;

    public Duck(string name) : this(name, 10)
    {
    }

    public Duck(string name, int possibleNumberOfQuacks)
    {
        _name = name;
        _remainingQuacks = possibleNumberOfQuacks;
    }
}

#!markdown

In this case, we can also do:

#!csharp

public class Duck
{
    private string _name;
    private int _remainingQuacks = 10;
    private int _timesQuacked;

    public Duck(string name)
    {
        _name = name;
    }

    public Duck(string name, int possibleNumberOfQuacks) : this(name)
    {
        _remainingQuacks = possibleNumberOfQuacks;
    }
}

#!markdown

The constructor to which we delegate is called first and then the body of the constructor proceeds.
So, in this case, first `Duck(string)` is called with `name` as the parameter, and when it's done
the `Duck(string, int)` constructor starts.

#!markdown

## Methods

Okay, so we can create objects, but we're still missing the "behaviour" part.
We can define methods on a type that will operate on the instance.
Method signatures are just like in C, but their names are PascalCase and they have access specifiers.
A method has a return type, but may be `void` if it returns nothing.

#!csharp

public class Duck
{
    private string _name;
    private int _remainingQuacks = 10;
    private int _timesQuacked;

    public Duck(string name) : this(name, 10)
    {
    }

    public Duck(string name, int possibleNumberOfQuacks)
    {
        _name = name;
        _remainingQuacks = possibleNumberOfQuacks;
    }

    public void Quack()
    {
        if (_remainingQuacks == 0)
        {
            Console.WriteLine($"{_name} is exhausted, they cannot quack anymore...");
            return;
        }

        _timesQuacked += 1;
        _remainingQuacks -= 1;

        Console.WriteLine($"Quack! ({_name} quacked {_timesQuacked} time{(_timesQuacked > 1 ? "s" : "")}, {_remainingQuacks} remain)");
    }
}

Duck peter = new Duck("Peter");
Duck johny = new Duck("Johny", 2);
peter.Quack();
johny.Quack();
johny.Quack();
johny.Quack();

#!markdown

## Properties

We have no way of inspecting our instance's state right now,
for example we can't read how many quacks are remaining.
In Java we'd make a special `getRemainingQuacks()` method, but in C# we use properties.

A property is a mechanism that allows us to read and/or write data from/to an object.
To get the value, we use a **getter**.

#!csharp

public class Duck
{
    private string _name;
    
    public string Name
    {
        get
        {
            return _name;
        }
    }

    public Duck(string name)
    {
        _name = name;
    }
}

Duck peter = new Duck("Peter");
Console.WriteLine(peter.Name);

#!markdown

This syntax – `duck.Name` instead of `duck.Name` – is much terser.
It also allows us to declare a **setter**.
A setter is a special method that has access to the `value` keyword,
that gives us the value that was passed to the property.

#!csharp

public class Duck
{
    private string _name;
    
    public string Name
    {
        get
        {
            return _name;
        }
        set
        {
            Console.WriteLine($"Setter's value is '{value}'");
            _name = value;
        }
    }

    public Duck(string name)
    {
        _name = name;
    }
}

var duck = new Duck("Peter");
Console.WriteLine(duck.Name);
duck.Name = "Johny";
Console.WriteLine(duck.Name);

#!markdown

### Expression-bodied members

This is all very cumbersome. But it can be better!
First of all, let me introduce you to your new best friend, **expression bodies**.
If a method is a one-liner you can make it shorter:

#!csharp

public class Duck
{
    private string _name;
    
    public string Name
    {
        get => _name;
        set => _name = value;
    }

    public Duck(string name)
    {
        _name = name;
    }

    public void Quack()
    {
        Console.WriteLine("Quack!");
    }
}

var duck = new Duck("Peter");
Console.WriteLine(duck.Name);
duck.Name = "Johny";
Console.WriteLine(duck.Name);

#!markdown

This applies to our constructor and the `Quack` method as well!

#!csharp

public class Duck
{
    private string _name;
    
    public string Name
    {
        get => _name;
        set => _name = value;
    }

    public Duck(string name) => _name = name;

    public void Quack() => Console.WriteLine("Quack!");
}

var duck = new Duck("Peter");
Console.WriteLine(duck.Name);
duck.Name = "Johny";
Console.WriteLine(duck.Name);

#!markdown

As you can see, if the statement on the right-hand-side of `=>` is an expression,
the value of a method call is that expression. If it's just a single statement,
then the method is considered `void` (constructors are basically `void` methods).

This is getting better and better. Public setters are rather rare, so we can remove it.
But wait! When your property is just an expression bodied getter you can use an even terser syntax!

#!csharp

public class Duck
{
    private string _name;
    
    public string Name => _name;

    public Duck(string name) => _name = name;

    public void Quack() => Console.WriteLine("Quack!");
}

var duck = new Duck("Peter");
Console.WriteLine(duck.Name);

#!markdown

Now trying to assign to the `Name` is a hard error:

#!csharp

// Intentionally does not compile.
public class Duck
{
    private string _name;
    
    public string Name => _name;

    public Duck(string name) => _name = name;

    public void Quack() => Console.WriteLine("Quack!");
}

var duck = new Duck("Peter");
duck.Name = "Johny";

#!markdown

### Accessors with different accessibilities.

What if we do want some logic when setting a value, but it still shouldn't be accessible from the outside? 
For example, we might want to be able to set the number of remaining quacks from within the `Duck` and make sure it's never less than zero,
but not allow that from the outside. Fortunately we can have different access modifiers on the getter and setter.

#!csharp

public class Duck
{
    private string _name;
    private int _remainingQuacks = 10;
    private int _timesQuacked;
    
    public string Name => _name;

    public int RemainingQuacks
    {
        get => _remainingQuacks;
        private set => _remainingQuacks = value > 0 ? value : 0; // <---
    }

    public Duck(string name) : this(name, 10)
    {
    }

    public Duck(string name, int possibleNumberOfQuacks)
    {
        _name = name;
        _remainingQuacks = possibleNumberOfQuacks;
    }

    public void Quack()
    {
        if (RemainingQuacks == 0)
        {
            Console.WriteLine($"{_name} is exhausted, they cannot quack anymore...");
            return;
        }

        _timesQuacked += 1;
        RemainingQuacks -= 1;

        Console.WriteLine($"Quack! ({_name} quacked {_timesQuacked} time{(_timesQuacked > 1 ? "s" : "")}, {RemainingQuacks} remain)");
    }
}

var peter = new Duck("Peter", -1);
Console.WriteLine(peter.RemainingQuacks);
peter.Quack();

#!markdown

### `readonly` fields

We have that `Name` get-only property and the `_name` field.
By the way, we call such a field the **backing field** of the property.
There's nothing that says that a property has to be tied to a single field,
we will see many examples where it is not – for example, a natural definition of a 2D point class would be:

#!csharp

class Point
{
    private double _x;
    private double _y;

    public double DistanceFromZero => Math.Sqrt(_x * _x + _y * _y);

    public Point(double x, double y)
    {
        _x = x;
        _y = y;
    }
}

#!markdown

However, it is often the case that we have some fields that are immutable.
I'd argue most of your data shouldn't be mutable if it doesn't have to.
We can enforce that by using the `readonly` modifier on the field.

#!csharp

class Point
{
    private readonly double _x;
    private readonly double _y;

    public double DistanceFromZero => Math.Sqrt(_x * _x + _y * _y);

    public Point(double x, double y)
    {
        _x = x;
        _y = y;
    }
}

#!markdown

Assigning to `_x` or `_y` would now be a hard error:

#!csharp

// Intentionally does not compile.
class Point
{
    private readonly double _x;
    private readonly double _y;

    public double DistanceFromZero => Math.Sqrt(_x * _x + _y * _y);

    public Point(double x, double y)
    {
        _x = x;
        _y = y;
    }

    public void Mutate()
    {
        _x = 0.0;
        _y = 0.0;
    }
}

#!markdown

That's a pretty verbose error message, we don't know what init-only setters or variable initializers are yet – don't worry about it now.
The important part is that the fields are still mutable in the constructor – after all it has to actually initialise the instance –
but not within any other methods, like `Mutate`.

So, back to our `Duck`:

#!csharp

public class Duck
{
    private readonly string _name;            // <---
    private int _remainingQuacks = 10;
    private int _timesQuacked;
    
    public string Name => _name;              // <---

    public int TimesQuacked => _timesQuacked; // <---

    public int RemainingQuacks
    {
        get => _remainingQuacks;
        private set => _remainingQuacks = value > 0 ? value : 0;
    }

    public Duck(string name) : this(name, 10)
    {
    }

    public Duck(string name, int possibleNumberOfQuacks)
    {
        _name = name;
        _remainingQuacks = possibleNumberOfQuacks;
    }

    public void Quack()
    {
        if (RemainingQuacks == 0)
        {
            Console.WriteLine($"{_name} is exhausted, they cannot quack anymore...");
            return;
        }

        _timesQuacked += 1;
        RemainingQuacks -= 1;

        Console.WriteLine($"Quack! ({_name} quacked {_timesQuacked} time{(_timesQuacked > 1 ? "s" : "")}, {RemainingQuacks} remain)");
    }
}

#!markdown

The `_name` is now immutable, but is still assignable in the constructor.

#!markdown

### Auto-implemented properties

There's a pattern here. A very common pattern.
We have public getter properties with a very simple implementation
that just returns the backing field. In one case it's mutable, in the other it's readonly.
This pattern is _so_ common that we have a better way of expressing it – auto properties.

#!csharp

public class Duck
{
    private int _remainingQuacks = 10;
    
    public string Name { get; }                    // <---

    public int TimesQuacked { get; private set; }  // <---

    public int RemainingQuacks
    {
        get => _remainingQuacks;
        private set => _remainingQuacks = value > 0 ? value : 0;
    }

    public Duck(string name) : this(name, 10)
    {
    }

    public Duck(string name, int possibleNumberOfQuacks)
    {
        Name = name;
        _remainingQuacks = possibleNumberOfQuacks;
    }

    public void Quack()
    {
        if (RemainingQuacks == 0)
        {
            Console.WriteLine($"{Name} is exhausted, they cannot quack anymore...");
            return;
        }

        TimesQuacked += 1;
        RemainingQuacks -= 1;

        Console.WriteLine($"Quack! ({Name} quacked {TimesQuacked} time{(TimesQuacked > 1 ? "s" : "")}, {RemainingQuacks} remain)");
    }
}

var duck = new Duck("Peter", 2);
duck.Quack();
duck.Quack();
duck.Quack();

#!markdown

There's a few things happening here.
First of all, the `_name` and `_timesQuacked` are gone.
Instead of them, we're using the `Name` and `TimesQuacked` properties directly.
The `TimesQuacked` property has a private setter, so we can freely mutate it in `Quack`.
The `Name` property doesn't, so we cannot mutate it at all. _However_, we can still initialise it in the constructor.

What's happening under the hood? Exactly the same thing as we wrote in the first place! 
The compiler simply synthesises a backing field for the property and delegates the getter and setter to it.

We cannot use the same trick (yet, looking at you, C#11 🙂) for the `RemainingQuacks` property, because our setter logic is more complicated
than "assign `value` to the backing field".

#!markdown

### Init-only setters

Let's refactor our `Duck` class a bit using what we've learnt.
Instead of having two data points that have to be updated at the same time – `TimesQuacked` and `_remainingQuacks` –
we can store the initial number of allowed quacks – an immutable value – and then track the number of times we quacked.
The `RemainingQuacks` property will then be computed from those two data points.

#!csharp

public class Duck
{
    public string Name { get; }

    public int PossibleNumberOfQuacks { get; }

    public int TimesQuacked { get; private set; }

    public int RemainingQuacks => PossibleNumberOfQuacks - TimesQuacked;

    public Duck(string name) : this(name, 10)
    {
    }

    public Duck(string name, int possibleNumberOfQuacks)
    {
        Name = name;
        PossibleNumberOfQuacks = possibleNumberOfQuacks;
    }

    public void Quack()
    {
        if (RemainingQuacks == 0)
        {
            Console.WriteLine($"{Name} is exhausted, they cannot quack anymore...");
            return;
        }

        TimesQuacked += 1;

        Console.WriteLine($"Quack! ({Name} quacked {TimesQuacked} time{(TimesQuacked > 1 ? "s" : "")}, {RemainingQuacks} remain)");
    }
}

var duck = new Duck("Peter", 2);
duck.Quack();
duck.Quack();
duck.Quack();

#!markdown

This is better. It also allows us to showcase a new toy – the `init`-only setter.
An `init`-only setter is a special setter that can be used only during object construction.

#!csharp

public class Duck
{
    public string Name { get; init; }

    public Duck(string name) => Name = name;
}

#!markdown

Using it somewhere else is a compile error:

#!csharp

// Intentionally does not compile.
public class Duck
{
    public string Name { get; init; }

    public Duck(string name) => Name = name;

    public void Foo()
    {
        Name = "Foo";
    }
}

var duck = new Duck("Peter");
duck.Name = "Bar";

#!markdown

## Object initialisers

I wrote "object construction". That means constructors, but also object initialisers.
An object initialiser is a way of initialising an object's properties right after instantiation.

#!csharp

public class Point
{
    public double X { get; set; }

    public double Y { get; set; }

    public double DistanceFromZero => Math.Sqrt(X * X + Y * Y);
}

var point = new Point
{
    X = 4.2,
    Y = -3.14
};

Console.WriteLine(point.X);
Console.WriteLine(point.Y);
Console.WriteLine(point.DistanceFromZero);

#!markdown

This also works with `init` setters:

#!csharp

public class Point
{
    public double X { get; init; }

    public double Y { get; init; }

    public double DistanceFromZero => Math.Sqrt(X * X + Y * Y);
}

var point = new Point
{
    X = 4.2,
    Y = -3.14
};

Console.WriteLine(point.X);
Console.WriteLine(point.Y);
Console.WriteLine(point.DistanceFromZero);

#!markdown

## Target-typed `new`

How are we with our `Duck`?

#!csharp

public class Duck
{
    public string Name { get; }

    public int PossibleNumberOfQuacks { get; init; } = 10;

    public int TimesQuacked { get; private set; }

    public int RemainingQuacks => PossibleNumberOfQuacks - TimesQuacked;

    public Duck(string name) => Name = name;

    public void Quack()
    {
        if (RemainingQuacks == 0)
        {
            Console.WriteLine($"{Name} is exhausted, they cannot quack anymore...");
            return;
        }

        TimesQuacked += 1;

        Console.WriteLine($"Quack!");
    }
}

var duck = new Duck("Peter") { PossibleNumberOfQuacks = 2 };
duck.Quack();
duck.Quack();
duck.Quack();
Console.WriteLine(duck.TimesQuacked);
Console.WriteLine(duck.RemainingQuacks);

#!markdown

Let's say we'd like to have an array of ducks:

#!csharp

var array = new[]
{
    new Duck("Peter"),
    new Duck("Johny"),
    new Duck("Azathoth"),
};

#!markdown

Isn't it tedious that we have to say "`Duck`" three times?
This is a much more common general issue – oftentimes we have a place that expects a certain type
and we are creating a new instance of that type to fill it. But since the expected type is known,
it can be inferred. To facilitate this, we have target-typed `new` – if the place in which
we want to use a `new T` expression expects an object of type `T` then we can omit the `T`.

#!csharp

var array = new Duck[]
{
    new("Peter"),
    new("Johny"),
    new("Azathoth"),
};

#!csharp

public class Point
{
    public double X { get; init; }
    public double Y { get; init; }

    public Point() { }

    public Point(double x, double y)
    {
        X = x;
        Y = y;
    }
}

public class Triangle
{
    public Point A { get; init; }
    public Point B { get; init; }
    public Point C { get; init; }
}

var triangle = new Triangle
{
    A = new(1.0, 2.0),
    B = new(3.0, 4.0),
    C = new(5.0, 9.0)
};

var otherTriangle = new Triangle
{
    A = new() { X = 1.0, Y = 2.0 },
    B = new() { X = 3.0, Y = 4.0 },
    C = new() { X = 5.0, Y = 9.0 },
};

#!markdown

## Method overloading

Method overloading is creating more than one method with the same name but a different list of formal parameters.
We have already technically overloaded constructors, when we had `Duck(string)` and `Duck(string, int)`, but we can overload any method:

#!csharp

public class Duck
{
    public string Name { get; }

    public int PossibleNumberOfQuacks { get; init; } = 10;

    public int TimesQuacked { get; private set; }

    public int RemainingQuacks => PossibleNumberOfQuacks - TimesQuacked;

    public Duck(string name) => Name = name;

    public void Quack() => Quack("Quack");

    public void Quack(string message)
    {
        if (RemainingQuacks == 0)
        {
            Console.WriteLine($"{Name} is exhausted, they cannot quack anymore...");
            return;
        }

        TimesQuacked += 1;

        Console.WriteLine($"{message}!");
    }
    
    public void Quack(int times) => Quack("Quack", times);

    public void Quack(string message, int times)
    {
        for (var i = 0; i < times; i += 1)
        {
            Quack(message);
        }
    }
}

var duck = new Duck("Peter") { PossibleNumberOfQuacks = 4 };
duck.Quack("Overloaded");
duck.Quack("Overloaded!!", 2);
duck.Quack();

#!markdown

Deciding which overload to use is done at compile-time.
The exact algorithm for that, called overload resolution, is notoriously complicated.
In most cases it works as you'd expect.

#!markdown

## Static members

Classes can also contain static members that are tied to the type, not to any particular instance.
These are quite useful, for example when we have a utility function that doesn't relate to any object,
a private helper that isn't tied to the state of an instance, or just something that is globally available
across the code. 

To access them we use the name of the enclosing type, not any particular instance.

#!csharp

public class Point
{
    public double X { get; init; }

    public double Y { get; init; }

    public double DistanceFromZero => Math.Sqrt(Square(X) + Square(Y));

    public static readonly Point Zero = new ();

    public static readonly Point UnitX = new () { X = 1.0 };

    public static readonly Point UnitY = new () { Y = 1.0 };

    private static double Square(double i) => i * i;
}

Console.WriteLine(Point.Zero.DistanceFromZero);
Console.WriteLine(Point.UnitX.DistanceFromZero);
Console.WriteLine(Point.UnitY.DistanceFromZero);

#!markdown

Note that while declaring public fields is a Bad Idea™ and public setters are best avoided,
mutable static fields are a sure way to blow your foot off. Mutable statics are global variables
and they are as bad as they would be in C -- they're ugly, they break, like, _all_ principles of OOP
and they're not thread-safe. You better have a really good reason for using them.

#!markdown

### Constants

You can also declare constants within types. They are implicitly static,
follow the same rules as const locals, and their names are in PascalCase.

#!csharp

public class Square
{
    public double EdgeLength { get; init; }

    public const double SquareRootOfTwo = 1.4142135623731;

    public double DiagonalLength => EdgeLength * SquareRootOfTwo;
}

var square = new Square { EdgeLength = 3.14 };
Console.WriteLine(square.DiagonalLength);

#!markdown

## Summary

We now know how to create classes in C#.
We've learnt the basic blocks for creating complex programs – fields, holding data, and methods, defining behaviour.
We met properties, that generalise the common getter-setter pattern.
We know how to create and initialise objects.

#!markdown

## Next up:

Continue with the next section, [0.7. Inheritance](https://gienieczko.com/teaching/csharp/0-basics/7-inheritance),
or straight to the next notebook, `7-inheritance.dib`.
