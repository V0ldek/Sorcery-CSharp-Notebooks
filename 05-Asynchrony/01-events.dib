#!markdown

# 5.1. Events

<small>Copyright (c) Mateusz Gienieczko 2022</small>

## How to use this notebook

### Content

This notebook is a part of the C#.NET Course at https://gienieczko.com/teaching/csharp/5-asynchrony.

It covers topics for section [5.2. Exception Handling](https://gienieczko.com/teaching/csharp/5-asynchrony/2-exception-handling).

### Notebook flow

The content within a single subsection of this notebook is self-contained.
However, within a single subsection you need to execute snippets from top to bottom,
as the snippets below might use variables or types that are declared in the snippets above.

### Play around

You can edit the code parts freely and experiment with the language.
That's kind of the point of doing all this in notebooks.

#!markdown

## Observer-Publisher Model

We begin our journey to concurrency with a basic model that separates creating events
to reacting to them. It doesn't have to involve multiple threads, but is a standard pattern
for scenarios where one thread creates events (for example user's interactions with the UI),
and the other reacts to them (for example by submitting user's input to a database).

One could imagine such a model using what we know thus far about C#.
Since we are going to be registering actions to be performed when something happens, we need to define a delegate
type for those actions. Let's imagine that our events are strings from the user.

#!csharp

public delegate void StringEventHandler(string input);

#!markdown

Now a publisher will need to implement this interface:

#!csharp

public interface IEventSource<THandler> where THandler : Delegate
{
    void Register(THandler handler);
}

#!markdown

Now an example publisher that simulates that it does some hard work:

#!csharp

using System.Threading;

static void WriteFromThread(string message) =>
    Console.WriteLine($"[{Thread.CurrentThread.ManagedThreadId}] {message}");

#!csharp

using System.Threading;

class Publisher : IEventSource<StringEventHandler>
{
    private readonly List<StringEventHandler> _handlers = new();

    public void Register(StringEventHandler handler) => _handlers.Add(handler);

    public void Run()
    {
        foreach (var e in new [] { "input1", "input2", "input3" })
        {
            Thread.Sleep(1000);
            Raise(e);
        }
    }

    private void Raise(string e)
    {
        WriteFromThread($"producing {e}");
        foreach (var handler in _handlers)
        {
            handler(e);
        }
    }
}

#!markdown

Now a consumer would look like this:

#!csharp

using System.Threading;

class Observer
{
    public void Run(IEventSource<StringEventHandler> source)
    {
        source.Register(Handle);
        
        Thread.Sleep(-1); // Sleep forever.
    }

    private void Handle(string e) => WriteFromThread($"received {e}");
}

#!markdown

Putting it all together with different threads:

#!csharp

using System.Threading;

var publisher = new Publisher();
var observer = new Observer();

var observerThread = new Thread(() => observer.Run(publisher));
var publisherThread = new Thread(() => publisher.Run());

observerThread.Start();
publisherThread.Start();

publisherThread.Join();

#!markdown

As we can see the handlers run on the publishers thread.

#!markdown

## Event language support

#!markdown

C# helps with this pattern with a special `event` member.
As before, we choose a delegate type, but there is a convention for proper event handler signature.

1. The handler is `void`.
2. It accepts two arguments, one of type `object?`, other of some subclass of `System.EventArgs`.
3. Its name ends with `EventHandler`.

Thus:

#!csharp

#nullable enable

public class StringEventArgs : EventArgs
{
    public string Input { get; }
    
    public StringEventArgs(string input) => Input = input;
}

public delegate void StringEventHandler(object? source, StringEventArgs e);

#!markdown

Remember that declaring custom delegates is rare? There's a generic delegate for
event handlers as well:
```csharp
public void EventHandler<TEventArgs>(object? source, TEventArgs e) where TEventArgs : EventArgs;
```

Now the `Publisher` class can declare an `event` member.

#!csharp

#nullable enable
using System.Threading;

class Publisher
{
    // The event member. It behaves just like a field of the delegate
    // type inside this class.
    public event EventHandler<StringEventArgs>? StringProduced;

    public void Run()
    {
        foreach (var e in new [] { "input1", "input2", "input3" })
        {
            Thread.Sleep(1000);
            OnStringProduced(new StringEventArgs(e));
        }
    }

    // Standard event firing method.
    // It allows subclasses of this class to hook into the event
    // and ensures that the event is fired correctly.
    // This is unnecessary if the class is sealed, but then it's still good
    // to declare a private member like this.
    protected virtual void OnStringProduced(StringEventArgs e)
    {
        WriteFromThread($"producing {e.Input}");
        // ALWAYS fire events like this.
        // Explanation follows below.
        StringProduced?.Invoke(this, e);
    }
}

#!markdown

From the outside, anyone that sees the event member (according to standard accessibility rules)
can subscribe to and unsubscribe from it, using the magical `+=` and `-=` operators

#!csharp

#nullable enable

class Observer
{
    public void Run(Publisher source)
    {
        source.StringProduced += Handle;
        
        Thread.Sleep(-1); // Sleep forever.
    }

    private void Handle(object? sender, StringEventArgs e) => WriteFromThread($"received {e.Input}");
}

#!csharp

using System.Threading;

var publisher = new Publisher();
var observer = new Observer();

var observerThread = new Thread(() => observer.Run(publisher));
var publisherThread = new Thread(() => publisher.Run());

observerThread.Start();
publisherThread.Start();

publisherThread.Join();

#!markdown

## Multicast ~~Spells~~ Delegates

Beware, there's magic afoot.

There's a detail we skipped over in [`4.4. Delegates`](TODO). All delegate instances
support _multicast_, which means that it can trigger more than one method, and they can
be combined together. This is done with the overloaded `+` and `-` operators.

#!csharp

Action hello = () => Console.WriteLine("Hello!");
Action world = () => Console.WriteLine("World!");
Action helloWorld = hello + world;

helloWorld();

#!markdown

Note that delegates are immutable. So doing this:

#!csharp

Action hello = () => Console.WriteLine("Hello!");
hello += () => Console.WriteLine("World!");

hello();

#!markdown

actually creates a new delegate instance for both methods and assigns it to the `hello` variable.
We can also subtract delegates that were already assigned:

#!csharp

Action hello = () => Console.WriteLine("Hello!");
Action world = () => Console.WriteLine("World!");

Action helloWorld = hello + world;
helloWorld();
helloWorld -= hello;
helloWorld();

#!markdown

Removing all methods turns the variable null:

#!csharp

Action hello = () => Console.WriteLine("Hello!");
Action world = () => Console.WriteLine("World!");

Action helloWorld = hello + world;
helloWorld();
helloWorld -= hello;
helloWorld -= world;

if (helloWorld is null)
{
    Console.WriteLine("null");
}

#!markdown

Moreover, adding to a `null` is just assignment:

#!csharp

#nullable enable
Action? f = null;
Action hello = () => Console.WriteLine("Hello!");

f += hello;

f();

#!markdown

## How Events Work

So we already know why the event is nullable and why we have to check for `null` in this invocation:

```csharp
StringProduced?.Invoke(this, e);
```

If we have no subscribers, the event's delegate instance will be `null`.

There is one more wrinkle here. The above invocation is correct, but this
one is not:

```csharp
if (StringProduced is not null)
{
    StringProduced.Invoke(this, e);
}
```

This is why:

#!csharp

#nullable enable
using System.Diagnostics;
using System.Threading;

class Publisher
{
    public event EventHandler? Event;

    public void OnEvent(EventArgs e)
    {
        if (Event is not null)
        {
            Thread.Sleep(1);
            Event.Invoke(this, e);
        }
    }
}

class Consumer
{
    private static readonly EventHandler Handler = (obj, e) => {};

    public void Run(Publisher publisher)
    {
        while (true)
        {
            publisher.Event += Handler;
            publisher.Event -= Handler;
            Thread.Sleep(10);
        }
    }
}


var publisher = new Publisher();
var consumer = new Consumer();
var publisherThread = new Thread(() => 
{
    try
    {
        while (true)
        {
            publisher.OnEvent(EventArgs.Empty);
            Thread.Sleep(10);
        }
    }
    catch (Exception e)
    {
        Console.WriteLine(e);
    }
});
var consumerThread = new Thread(() => consumer.Run(publisher));

publisherThread.Start();
consumerThread.Start();

publisherThread.Join(1000);
consumerThread.Join(1000);

#!markdown

There's a race, and racing is dangerous.

Now, under the hood, the compiler does three things:

1. It creates a field of the delegate type.
2. It redirects all references to the event inside the declaring type to the field.
3. It redirects all `+=` and `-=` calls from the outside to special `add` and `remove`
accessors.

The accessors are akin to `get` and `set` accessors on properties.
Here's an approximation of the expansion of the event we declared:

```csharp
private EventHandler _event;

public event EventHandler? Event
{
    add { _event += value; }
    remove { _event += value; }
}
```

This is almost true, only that the compiler injects some thread-safety
into the delegate access that we will talk about after we learn about synchronisation mechanisms.

There's seldom any reason to not use the default expansion and
implement `add` and `remove` by hand, a notable use-case would
be creating a thin wrapper over some other delegate in a different class.

#!markdown

## Summary

We've learnt how to declare and subscribe to events for a publisher-observer model.

#!markdown

## Next up:

Continue with the next section, [5.2. Exception Handling](https://gienieczko.com/teaching/csharp/5-asynchrony/2-exception-handling),
or straight to the next notebook, `02-exception-handling.dib`.
