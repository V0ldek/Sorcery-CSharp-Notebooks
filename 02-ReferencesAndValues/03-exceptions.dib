#!markdown

# 1.3. Exceptions

<small>Copyright (c) Mateusz Gienieczko 2022</small>

## How to use this notebook

### Content

This notebook is a part of the C#.NET Course at https://gienieczko.com/teaching/csharp/2-references-and-values.

It covers topics for section [2.3. Exceptions](https://gienieczko.com/teaching/csharp/2-references-and-values/3-exceptions).

### Notebook flow

The content within a single subsection of this notebook is self-contained.
However, within a single subsection you need to execute snippets from top to bottom,
as the snippets below might use variables or types that are declared in the snippets above.

### Play around

You can edit the code parts freely and experiment with the language.
That's kind of the point of doing all this in notebooks.

#!markdown

## Exceptions

Exceptions in .NET are a way of abruptly aborting computation
once something exceptional happens. Exceptions stem either 
1. from bugs in our code, like `IndexOutOfRangeException` or `NullReferenceException`; or
2. from unfortunate realities of the world around us: network partitions,
file system failures, etc.

We will not be learning how to `catch` these exceptions yet, as none of the operations
that we are performing can fail in the reasonable, second way. However,
throwing exceptions with the `throw` keyword will be useful.

#!markdown

## Defensive programming

In C#, we embrace the [fail-fast](https://en.wikipedia.org/wiki/Fail-fast) approach.
Our public facing methods might receive arguments that make no sense and it is our duty to tell the user that, immediately.

Here's a bunch of exceptions we all need in our daily life:

- `System.ArgumentNullException` – when an argument is `null` and shouldn't be; we'll cover nullability in section 1.5.
- `System.ArgumentOutOfRangeException` – when an argument is outside of range of possible values, for example we expected
a positive number, or a non-zero number; this is also used when an enum is received with a value that isn't a valid variant
of the enum.
- `System.ArgumentException` – base class of the above two, used when they are not applicable, but the argument is invalid in some other way.
- `System.InvalidOperationException` – a general error for when the current state of the system does not allow for a given operation;
it's best to enforce such constraints on type level, but sometimes it's impossible; I used it in the code of the executable for your
first micro-assignment – there's a `GameEngine` class that executes the game turn-by-turn, and calling `ProcessTurn` when
the game is already over (dungeon cleared, hero died...) triggers an `InvalidOperationException`.

You should always write your methods so that arguments are validated as soon as possible and the user informed on incorrect usage immediately.
So, when we write a modulo method...

#!csharp

int Modulo(int x, int m)
{
    if (m == 0)
    {
        throw new ArgumentOutOfRangeException(nameof(m));
    }

    return x % m;
}

Console.WriteLine(Modulo(5, 3));
Console.WriteLine(Modulo(5, 0));

#!markdown

Most ubiquitously we'll see this when handling reference types and checking them for `null`.

#!markdown

## Summary

We know the most common exceptions used in defensive programming.

#!markdown

## Next up:

Continue with the next section, [2.4. Nullability](https://gienieczko.com/teaching/csharp/2-references-and-values/4-nullability),
or straight to the next notebook, `04-nullability.dib`.
