#!markdown

# 1.2. Overloading Operators

<small>Copyright (c) Mateusz Gienieczko 2022</small>

## How to use this notebook

### Content

This notebook is a part of the C#.NET Course at https://gienieczko.com/teaching/csharp/2-references-and-values.

It covers topics for section [2.2. Operator Overloading](https://gienieczko.com/teaching/csharp/2-references-and-values/2-operator-overloading).

### Notebook flow

The content within a single subsection of this notebook is self-contained.
However, within a single subsection you need to execute snippets from top to bottom,
as the snippets below might use variables or types that are declared in the snippets above.

### Play around

You can edit the code parts freely and experiment with the language.
That's kind of the point of doing all this in notebooks.

#!markdown

## Overloading operators

C# stands between Java and C++ when it comes to operator overloading.
Unlike Java, we _can_ overload operators, but unlike C++ we have to do it in a very controlled
manner and we cannot overload all of them, for example we can't overload assignment `=` or method call `()`.

Operators are public static methods with special names and a restricted signature.
At least one of their parameters must be the type within which the operator is overloaded.
Let's define a struct:

#!csharp

public readonly struct Point
{
    public double X { get; init; }

    public double Y { get; init; }
}

#!markdown

We can overload a few things to make this value type more ergonomic:
- `+` and `-` to do linear transformations on the points;
- ... as well as `*` by a scalar, again, for linear transformations;
- unary negation.

#!csharp

// Intentionally does not compile
public readonly struct Point
{
    public double X { get; init; }

    public double Y { get; init; }

    public static Point operator +(Point point, Point other) => new() { X = point.X + other.X, Y = point.Y + other.Y };

    public static Point operator -(Point point, Point other) => new() { X = point.X - other.X, Y = point.Y - other.Y };

    public static Point operator *(Point point, double scalar) => new() { X = scalar * point.X, Y = scalar * point.Y };

    public static Point operator *(double scalar, Point point) => point * scalar;

    public static Point operator -(Point point) => new() { X = -point.X, Y = -point.Y };

    public override string ToString() => $"({X}, {Y})";
}

var unitX = new Point { X = 1 };
var unitY = new Point { Y = 1 };

var point = unitX + unitY;

Console.WriteLine($"unitX + unitY: {point}");
Console.WriteLine($"unitX - unitY: {unitX - unitY}");
Console.WriteLine($"-point: {-point}");
Console.WriteLine($"3 * point: {3 * point}");
Console.WriteLine($"point * 3: {point * 3}");

#!markdown

Multiplication is not commutative by default. In general, C# doesn't assume any specific semantics for the operators,
except that some of them need to be overloaded in pairs: `==` and `!=`, `<` and `>`, `<=` and `>=`.
We omit equality and comparison for now, as it's pretty complicated – we'll revisit it in the next module.

It's customary to provide instance methods that correspond to the operators,
mainly because operators are very C#-specific, so they don't interoperate well within the CLR.
It's much nicer for outside code to be able to call an `Add` method directly on the point:

#!csharp

// Intentionally does not compile
public readonly struct Point
{
    public double X { get; init; }

    public double Y { get; init; }

    public Point Add(Point other) => new() { X = X + other.X, Y = Y + other.Y };

    public Point Subtract(Point other) => new() { X = X - other.X, Y = Y - other.Y };

    public Point Multiply(double scalar) => new() { X = scalar * X, Y = scalar * Y };

    public Point Negate() => new() { X = -X, Y = -Y };

    public static Point operator +(Point point, Point other) => point.Add(other);

    public static Point operator -(Point point, Point other) => point.Subtract(other);

    public static Point operator *(Point point, double scalar) => point.Multiply(scalar);

    public static Point operator *(double scalar, Point point) => point.Multiply(scalar);

    public static Point operator -(Point point) => point.Negate();

    public override string ToString() => $"({X}, {Y})";
}

var unitX = new Point { X = 1 };
var unitY = new Point { Y = 1 };

var point = unitX + unitY;

Console.WriteLine($"unitX + unitY: {point}");
Console.WriteLine($"unitX - unitY: {unitX - unitY}");
Console.WriteLine($"-point: {-point}");
Console.WriteLine($"3 * point: {3 * point}");
Console.WriteLine($"point * 3: {point * 3}");

#!markdown

Operators are usually overloaded for value types, where they can provide
an ergonomic API if they are used a lot. For example, in code that would operate
on 2D vectors a lot, we'd want `Point` to have all of those operators.

#!markdown

## Operator overloading sanity check

Overloading operators is a delicate matter.
The .NET team have [design guidelines](https://docs.microsoft.com/en-us/dotnet/standard/design-guidelines/operator-overloads)
for operator overloads, one of which is:

> DO NOT be cute when defining operator overloads.

More specifically:

> it is not appropriate to use the logical union operator to union two database queries, or to **use the shift operator to write to a stream**.

As a general guideline, mostly value types benefit from overloading operators.
The `string` type is a reference type, but honestly, that's more of a vestige of the old-timey C# without generics.
It behaves as a value type for all intents and purposes.
Overall, it should be obvious what a given operator does in the context of a type.
For strings it is – it's naturally concatenation.
For our `Point` it is as well, adding vectors together is as obvious as it gets.
Defining a magical `*` operator that performs IO operations on a database when
you multiply it with a JSON document is not.

#!markdown

## Summary

We've learnt how to overload operators to make our custom value types more ergonomic to use.

#!markdown

## Next up:

Continue with the next section, [2.3. Exceptions](https://gienieczko.com/teaching/csharp/2-references-and-values/3-exceptions),
or straight to the next notebook, `03-exceptions.dib`.
