#!markdown

# 8.2. Attributes

<small>Copyright (c) Mateusz Gienieczko 2022</small>

## How to use this notebook

### Content

This notebook is a part of the C#.NET Course at https://gienieczko.com/teaching/csharp/8-reflection/2-attributes.

It covers topics for section [8.2. Attributes](https://gienieczko.com/teaching/csharp/8-reflection/2-attributes).

### Notebook flow

The content within a single subsection of this notebook is self-contained.
However, within a single subsection you need to execute snippets from top to bottom,
as the snippets below might use variables or types that are declared in the snippets above.

### Play around

You can edit the code parts freely and experiment with the language.
That's kind of the point of doing all this in notebooks.

#!markdown

## Getting Attribute Info

One of the most important uses of reflection is getting attribute information from types.
We can get the attribute and the values with which it was instantiated.

#!csharp

using System.Reflection;
using System.Text.Json.Serialization;

public class MyType
{
    [JsonPropertyName("myValue")]
    public string Value { get; private set; }

    public MyType(string value) => Value = value;
}

Type type = typeof(MyType);
PropertyInfo prop = type.GetProperty("Value");
CustomAttributeData attribute = prop.CustomAttributes
    .Single(ca => ca.AttributeType == typeof(JsonPropertyNameAttribute));

IList<CustomAttributeTypedArgument> argument = attribute.ConstructorArguments;
object value = argument.Select(a => a.Value).Single();

Console.WriteLine(value);

#!markdown

And now you know how all of those fancy tools we've been using work. JSON serializers? They read the attribute metadata
off our types, use reflection to construct instances, set properties, and then return the filled objects to us.
Test suites? They look for methods flagged with `FactAttribute` or `TheoryAttribute` and take it from there.

Now the only missing piece is how to create our own metadata.

#!markdown

## Custom Attributes

An attribute:

- inherits from `System.Attribute`;
- is marked with the `System.AttributeUsageAttribute`;
- has a name ending with `Attribute`.

As an example, let's say we have types that require complex initialisation logic, so they have
static factory methods. We would like to be able to resolve them from an instance, perhaps for the purposes
of Dependency Injection. We will create a custom attribute used to mark the factory methods that will be used
by the resolver to construct the instances. Additionally, it will tell the factory whether the method
is asynchronous and should be awaited with a boolean flag, set to false by default.

#!csharp

// These are flags that tell the compiler where this attribute makes sense.
// If we try to put this one on anything other than a method, we will get a 
// compile-time error.
//              vvvvvvvvvvvvvvvvvvvvvvv
[AttributeUsage(AttributeTargets.Method, Inherited = false)]
public sealed class FactoryMethodAttribute : Attribute
{
    public bool Await { get; init; }
}

#!csharp

public class Service
{
    public void SayHello() => Console.WriteLine("Hello from the Service!");

    [FactoryMethod]
    public static Service Create()
    {
        Console.WriteLine("Creating a Service...");
        // Complex logic here.
        return new Service();
    }
}

public class AsyncService
{
    public void SayHello() => Console.WriteLine("Hello from the AsyncService!");

    [FactoryMethod(Await = true)]
    public static async Task<AsyncService> CreateAsync()
    {
        Console.WriteLine("Creating an AsyncService...");
        // Complex logic here.
        await Task.Delay(1000);
        return new AsyncService();
    }
}

#!csharp

public sealed class Resolver
{
    public static async ValueTask<T> ResolveAsync<T>()
    {
        Type type = typeof(T);
        var factoryMethods = 
            from method in type.GetMethods(BindingFlags.Public | BindingFlags.Static)
            let attribute = method.GetCustomAttribute<FactoryMethodAttribute>()
            where attribute is not null
            select new
            {
                Method = method,
                Await = attribute.Await
            };

        var onlyMethod = factoryMethods.Single();

        //                      Static method vvvv
        var result = onlyMethod.Method.Invoke(null, null);
        //                            No parameters ^^^^
        
        if (onlyMethod.Await)
        {
            return await (Task<T>) result;
        }
        else
        {
            return (T) result;
        }
    }
}

#!csharp

var service = await Resolver.ResolveAsync<Service>();
var asyncService = await Resolver.ResolveAsync<AsyncService>();

service.SayHello();
asyncService.SayHello();

#!markdown

Just so you know, we could technically test for `async` by looking for an `AsyncStateMachineAttribute` on the method.
However, that wouldn't work if the factory method was a non-`async` `Task`-returning method, where we would very much
still like to await it without hassle.

#!markdown

You can do _the coolest shit_ with custom metadata. Again, think of all the fancy tools.
The testing frameworks, JSON serializers, Entity Framework, ASP.NET Core, all of them rely on reflection
and attributes to do the stuff they do.

There is a small wrinkle in the above code. We explicitly cast the asynchronous result to `Task<T>`, even
though we know there are many different types that can be awaited, `ValueTask<T>` being one of them.
If we try to resolve a service with a `ValueTask<T>` factory method we will get a nasty runtime exception.

Unfortunately, the various task-like types don't share an interface â€“ `await` relies on them having
a certain shape, with a `GetAwaiter` method, etc. There is, however, one ultimate trick that we have at our disposal.

We can break free of the type system.

#!markdown

## Summary

We've learnt how to retrieve attribute metadata and how to define our own custom attributes.

#!markdown

## Next up:

Continue with the next section, [8.3. System Attributes](https://gienieczko.com/teaching/csharp/8-reflection/3-system-attributes),
or straight to the next notebook, [`03-system-attributes.dib`](03-system-attributes.dib).
